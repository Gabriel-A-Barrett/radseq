/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: FASTP {
        ext.umi_args = '--umi --umi_loc=read2 --umi_len=8 --umi_skip=2 --umi_prefix=UMI'
        ext.args = '--detect_adapter_for_pe --dont_eval_duplication --cut_right --cut_window_size=25 --cut_mean_quality=20 --correction --overlap_diff_limit=1 --trim_poly_g --dont_eval_duplication --disable_length_filtering --trim_front1 6 --trim_front2 3'
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.html",
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                enabled: params.save_trimmed
            ]
        ]
    }

    withName: PREPARE_FORWARD_READS {
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/" },
            mode: params.publish_dir_mode,
            pattern: "*.uniq.seqs",
            enabled: params.save_uniqseq
        ]
    }

    withName: COMBINE_UNIQUE_READS {
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/" },
            mode: params.publish_dir_mode,
            pattern: "*_uniq.full.fasta",
            enabled: params.save_uniq_full_fasta
        ]
    }

    withName: SEQTK_SEQ {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/seqtk/" },
            mode: params.publish_dir_mode,
            pattern: "*.seqtk-seq.*.gz",
            enabled: params.save_seqtk_seq_fasta
        ]
    }

    withName: DENOVO_FASTP {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.uniq.fasta",
                enabled: params.save_trim_adapters_fastp
            ],
            [
            path: { "${params.outdir}/${params.method}/reference/fastp/" },
            mode: params.publish_dir_mode,
            pattern: "*.totaluniqseq",
            enabled: params.save_trim_adapters_fastp
            ]
        ]
    }

    withName: CDHIT {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit" },
                mode: params.publish_dir_mode,
                pattern: "*_cdhit.log"
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit" },
                mode: params.publish_dir_mode,
                pattern: "*.clstr",
                enabled: params.save_cdhit_clstr
            ]
        ]
    }

    withName: CDHIT_TO_RBDIV {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit_to_rbdiv" },
                mode: params.publish_dir_mode,
                pattern: "*.sort.contig.cluster.ids"
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit_to_rbdiv" },
                mode: params.publish_dir_mode,
                pattern: "*.contig.cluster.totaluniqseq"
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit_to_rbdiv" },
                mode: params.publish_dir_mode,
                pattern: "*.rcluster"
            ]
        ]
    }

    withName: RAINBOW_DIV {
        ext.args = '-f 0.5 -K 10'
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_div" },
                mode: params.publish_dir_mode,
                pattern: "*_rbdiv.out"
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_div" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }

    withName: RAINBOW_MERGE {
        ext.args = '-r 2 -N10000 -R10000 -l 20 -f 0.75'
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_merge" },
                mode: params.publish_dir_mode,
                pattern: "*_rbmerge.log"
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_merge" },
                mode: params.publish_dir_mode,
                pattern: "*_rbmerge.out"
            ]
        ]
    }

    withName: WRITE_FASTA {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/write_fasta" },
                mode: params.publish_dir_mode,
                pattern: "*_rainbow.fasta"
            ]
        ]
    }
    
    withName: SAMTOOLS_FAIDX {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/index" },
            mode: params.publish_dir_mode,
            enabled: params.save_reference_fai,
            pattern: "*.fai"
        ]
    }

    
    withName: BWA_INDEX {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/index/" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference_fai,
                pattern: "*.fai"
            ]
        ]
    }

    withName: BWA_MEM {
        ext.args = { [
            // static variables
            '-L 20,5 -a -M -T 10'
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/samtools_stats/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        ]
    }

    /*

    TODO: add support for 3 params.aligner

    */

    withName: UMITOOLS_DEDUP {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/umitools_dedup/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ],
            [
                path: { "${params.outdir}/${params.method}/alignments/umitools_dedup/stats" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        ]
    }

    withName: SAMTOOLS_INDEX {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/samtools_index" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        ]
    }

    withName: SAMTOOLS_MERGE {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/samtools_merge/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/samtools_stats/" },
                mode: params.publish_dir_mode,
                pattern: "*.flagstat"
            ]
        ]
    }

    withName: SAMTOOLS_STATS {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/samtools_stats/" },
                mode: params.publish_dir_mode,
                pattern: "*.stats"
            ]
        ]
    }

    withName: BEDTOOLS_BAMTOBED {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_intervals
            ]
        ]
    }

    withName: BEDOPS_MERGE_BED {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedops_merge/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_intervals
            ]
        ]
    }

    withName: BEDTOOLS_SORT {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_sort/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_intervals
            ]
        ]
    }

    withName: BEDTOOLS_COVERAGE {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_coverage/" },
                mode: params.publish_dir_mode,
                pattern: "*.cov",
                enabled: params.save_intervals
            ]
        ]
    }

    withName: BEDTOOLS_MERGE_COV {
        ext.args = '-c 4 -o sum'
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_merge/" },
                mode: params.publish_dir_mode,
                pattern: "*.cov",
                enabled: params.save_intervals
            ]
        ]
    }

    withName: BEDTOOLS_MAKEWINDOWS {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                pattern: "*.tab",
                enabled: params.save_intervals
            ],
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                pattern: "_cov.low.stats",
                enabled: params.save_intervals
            ],
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                pattern: "_cov.low.stats",
                enabled: params.save_intervals
            ]
        ]
    }

    withName: BEDTOOLS_INTERSECT {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/bedtools_intersect/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_intervals
            ]
        ]

    }

    withName: CREATE_INTERVALS {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/alignments/create_intervals/" },
                mode: params.publish_dir_mode,
                pattern: "mapped.*.bed",
                enabled: params.save_intervals
            ]
        ]
    }
    
    withName: FREEBAYES {
        // default static arguments
        ext.args = '-m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1'
    }

    withName: BCFTOOLS_SORT {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/intervals/" },
                mode: params.publish_dir_mode,
                pattern: "*.gz",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }

    withName: TABIX_TABIX {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/intervals/" },
                mode: params.publish_dir_mode,
                pattern: "*.tbi",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }

    withName: BCFTOOLS_CONCAT {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/" },
                mode: params.publish_dir_mode,
                pattern: "*.gz",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }
}
