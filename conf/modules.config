/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        ext.prefix = null
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
    withName: FASTQ_UNZIP {
        publishDir = [
            enabled: false
        ]
    }
    withName: FASTP {
        ext.args = { [ 
            params.dont_eval_duplicates      ? '--dont_eval_duplication'                             : '',
            params.cut_right                 ? '--cut_right'                                         : '',
            params.window_size               ? "--cut_window_size ${params.window_size}"             : '',
            params.mean_min_quality          ? "--cut_mean_quality ${params.mean_min_quality}"       : '',
            params.pairedend_bp_corr         ? '--correction'                                        : '',
            params.overlap_dif_limit         ? "--overlap_diff_limit ${params.overlap_dif_limit}"    : '',
            params.clip_r1                   ? "--trim_front1 ${params.clip_r1}"                     : '',
            params.clip_r2                   ? "--trim_front2 ${params.clip_r2}"                     : '',
            params.trim_polyg                ? '--trim_poly_g'                                       : '',
            params.disable_length_filtering  ? '--disable_length_filtering'                          : '',
            params.percent_unqualified       ? "--unqualified_percent_limit ${params.percent_unqualified}" : ''
        ].join(' ').trim() }
        
        ext.umi_args = params.fastp_umi_read_structure ?: ''
        
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.html",
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: 'copy',
                pattern: "*.json",
            ]
        ]
    }
    withName: TRIM_FASTP {
        ext.args = { [ 
            params.dont_eval_duplicates ? '--dont_eval_duplication'                             : '',
            params.denovo_clip_r1              ? "--trim_front1 ${params.denovo_clip_r1}"       : '',
            params.denovo_clip_r2              ? "--trim_front2 ${params.denovo_clip_r2}"       : '',
            params.trim_polyg           ? '--trim_poly_g'                                       : '',
            '--disable_quality_filtering'
        ].join(' ').trim() }
                
        publishDir = [
            [
                path: { "${params.outdir}/denovo/trim_fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.html",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/denovo/trim_fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/denovo/trim_fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                enabled: params.denovo_intermediate_files
            ]
        ]
    }

    withName: PREPARE_FORWARD_READS {
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/unique_sequences" },
            mode: params.publish_dir_mode,
            pattern: "*.uniq.seqs",
            enabled: params.denovo_intermediate_files
        ]
    }

    withName: COMBINE_UNIQUE_READS {
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/unique_sequences" },
            mode: params.publish_dir_mode,
            pattern: "*_uniq.full.fasta",
            enabled: params.denovo_intermediate_files
        ]
    }

    withName: SEQTK_SEQ {
        ext.args = '-F I'
        publishDir = [
            path: { "${params.outdir}/${params.method}/reference/seqtk/" },
            mode: params.publish_dir_mode,
            pattern: "*.seqtk-seq.*.gz",
            enabled: params.denovo_intermediate_files
        ]
    }

    withName: DENOVO_FASTP {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.uniq.fasta",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.totaluniqseq",
                enabled: params.denovo_intermediate_files
            ]
        ]
    }

    withName: CDHIT {
        ext.args = { [
            params.cluster_algorithm   ? "-g ${params.cluster_algorithm}"   : '',
            params.description_length  ? "-d ${params.description_length}"  : '',
            params.sequence_simularity ? '-c ' + params.sequence_simularity : ''
        ].join(' ').trim() }

        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit" },
                mode: params.publish_dir_mode,
                pattern: "*_cdhit.log",
                enabled: params.denovo_intermediate_files

            ],
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit" },
                mode: params.publish_dir_mode,
                pattern: "*.clstr",
                enabled: params.denovo_intermediate_files
            ]
        ]
    }

    withName: CDHIT_TO_RBDIV {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit_to_rbdiv" },
                mode: params.publish_dir_mode,
                pattern: "*.sort.contig.cluster.ids",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit_to_rbdiv" },
                mode: params.publish_dir_mode,
                pattern: "*.contig.cluster.totaluniqseq",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/cdhit_to_rbdiv" },
                mode: params.publish_dir_mode,
                pattern: "*.rcluster",
                enabled: params.denovo_intermediate_files
            ]
        ]
    }

    withName: RAINBOW_DIV {
        // recommended static arguments
        ext.args = { [ 
            params.similarity_fraction ? "-f ${params.similarity_fraction}" : '',
            params.max_variants        ? "-K ${params.max_variants}"        : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_div" },
                mode: params.publish_dir_mode,
                pattern: "*_rbdiv.out",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_div" },
                mode: params.publish_dir_mode,
                pattern: "*_rbdiv.log",
                enabled: params.denovo_intermediate_files
            ]
        ]
    }

    withName: RAINBOW_MERGE {
        // recommended static arguments
        ext.args = { [
            params.min_reads               ? "-r ${params.min_reads}"               : '',
            params.max_clusters_for_merge  ? "-N${params.max_clusters_for_merge}"   : '',
            params.max_reads_for_assembly  ? "-R${params.max_reads_for_assembly}"   : '',
            params.min_overlap             ? "-l ${params.min_overlap}"             : '',
            params.min_similarity_fraction ? "-f ${params.min_similarity_fraction}" : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_merge" },
                mode: params.publish_dir_mode,
                pattern: "*_rbmerge.log",
                enabled: params.denovo_intermediate_files
            ],
            [
                path: { "${params.outdir}/${params.method}/reference/rainbow_merge" },
                mode: params.publish_dir_mode,
                pattern: "*_rbmerge.out",
                enabled: params.denovo_intermediate_files
            ]
        ]
    }

    withName: WRITE_FASTA {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/write_fasta" },
                mode: params.publish_dir_mode,
                pattern: "*_rainbow.fasta"
            ]
        ]
    }
    /*withName: GATK4_CREATESEQUENCEDICTIONARY {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/gatk4/" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }*/
    
    withName: SAMTOOLS_FAIDX {
        ext.args = ''
        publishDir = [
            path: { ( "${params.method}" == 'denovo' ? "${params.outdir}/${params.method}/samtools/index" : "${params.outdir}/${params.method}/samtools/index" ) },
            mode: params.publish_dir_mode,
            enabled: params.save_reference_indices,
            pattern: "*.fai"
        ]
    }

    withName: 'BWA_INDEX|BWAMEM2_INDEX' {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/reference/${params.aligner}/index/" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference_indices,
                pattern: "*/*"
            ]
        ]
    }

    withName: 'BWAMEM.*_MEM_POST|BWAMEM.*_MEM|BWA_MEM' {
        ext.args = { [
            // set default scores for alignments 
            params.clipping_penalty  ? '-L ' + params.clipping_penalty : '',
            params.output_secondary  ? '-a'                            : '',
            params.mark_short_as_sec ? '-M'                            : '',
            params.min_aln_quality   ? '-T ' + params.min_aln_quality  : '',
            params.matching_score    ? '-A ' + params.matching_score   : '',
            params.mismatch_score    ? '-B ' + params.mismatch_score   : '',
            params.gap_penalty       ? '-O ' + params.gap_penalty      : '',
            params.off_diagonal      ? '-d ' + params.off_diagonal     : '',
            params.min_seed_length   ? '-I ' + params.min_seed_length  : ''
        ].join(' ').trim() }
        
        // samtools args
        ext.args2 = { [ 
            '-S -h -u',
            params.quality_score ? '-q ' + params.quality_score   : ''
        ].join(' ').trim() }
        ext.args3 = '-O cram'
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/bam/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: params.save_bam_files
            ]
        ]
    }

    withName: SAMTOOLS_INDEX {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/samtools_index" },
                mode: params.publish_dir_mode,
                pattern: "*.bai"
            ]
        ]
    }

    withName: SAMTOOLS_MERGE {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/samtools_merge/" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/samtools_stats/" },
                mode: 'copy',
                pattern: "*.flagstat"
            ]
        ]
    }

    withName: SAMTOOLS_STATS {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/samtools_stats/" },
                mode: 'copy',
                pattern: "*.stats"
            ]
        ]
    }

    withName: SAMTOOLS_IDXSTATS {
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/samtools_stats/" },
                mode: 'copy',
                pattern: "*.idxstats"
            ]
        ]
    }

    withName: BEDTOOLS_BAMTOBED {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_bamtobed/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_bed_intervals
            ]
        ]
    }

    withName: BEDOPS_MERGE_BED {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedops_merge/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_bed_intervals
            ]
        ]
    }

    withName: BEDTOOLS_SORT {
        ext.args = ''
        ext.prefix = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_sort/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_bed_intervals
            ]
        ]
    }

    withName: BEDTOOLS_COVERAGE {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_coverage/" },
                mode: params.publish_dir_mode,
                pattern: "*.cov",
                enabled: params.save_bed_intervals
            ]
        ]
    }

    withName: BEDTOOLS_MERGE_COV {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_merge/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.cov",
                enabled: params.save_bed_intervals
            ]
        ]
    }

    withName: BEDTOOLS_MAKEWINDOWS_BED {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                pattern: "*.tab",
                enabled: params.save_bed_intervals
            ],
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                pattern: "_cov.low.stats",
                enabled: params.save_bed_intervals
            ],
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "_cov.high.stats",
                enabled: params.save_bed_intervals
            ]
        ]
    }
    withName: BEDTOOLS_MAKEWINDOWS_FAI {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_makewindows/" },
                mode: params.publish_dir_mode,
                pattern: "*.bed",
                enabled: params.save_bed_intervals
            ]
        ]
    }

    withName: BEDTOOLS_INTERSECT {
        ext.prefix = ''
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/bedtools_intersect/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.bed",
                enabled: params.save_bed_intervals
            ]
        ]

    }

    withName: CREATE_INTERVALS {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/intervals/create_intervals/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "mapped.*.bed",
                enabled: params.save_bed_intervals
            ]
        ]
    }
    
    withName: BCFTOOLS_MPILEUP {
        ext.args = { [
            params.min_basequal ? "--min-BQ ${params.min_basequal}" : '',
            params.annotate_vcf ? "--annotate ${params.annotate_vcf}" : '',
            '-Ou' // output compressed bcf
         ].join(' ').trim() }
        ext.args2 = { [
            params.multiallelic_caller ? "--multiallelic-caller" : '',
            params.variants_only ? '--variants-only' : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/${params.aligner}/variant_calling/raw_vcf/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "mapped.*.bed",
                enabled: params.save_mpileup
            ]
        ]
    }

    withName: FREEBAYES {
        ext.args = { [
            params.min_map_qual       ? "-m ${params.min_map_qual}"                         : '',
            params.min_base_qual      ? "-q ${params.min_base_qual}"                        : '',
            params.complex_gap        ? "-E ${params.complex_gap}"                          : '',
            params.use_best_n_alleles ? "-n ${params.use_best_n_alleles}"                   : '',
            params.min_alt_fraction   ? "-F ${params.min_alt_fraction}"                     : '',
            params.min_repeat_entropy ? "--min-repeat-entropy ${params.min_repeat_entropy}" : '',
            params.skip_coverage      ? "--skip-coverage ${params.skip_coverage}"           : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/intervals" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.vcf.gz",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }

    withName: BCFTOOLS_SORT {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/intervals/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.gz",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }
    withName: TABIX_TABIX {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/intervals/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.tbi",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }
    withName: TABIX_TABIX1 {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/intervals/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.tbi",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }
    withName: TABIX_TABIX2 {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.tbi",
                enabled: params.save_freebayes_intervals
            ]
        ]
    }
    withName: BCFTOOLS_CONCAT {
        ext.args = '--remove-duplicates --allow-overlaps --output-type b'
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.gz",
            ]
        ]
    }

    withName: BCFTOOLS_STATS {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*stats.txt",
            ]
        ]
    }
    withName: BCFTOOLS_NORM {
        ext.args = { [
            params.atomize_variants ? "-a" : '',
            params.split_multiallelic ? "-m ${params.split_multiallelic}" : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: ""
            ]
        ]
    }
    withName: TABIX {
        ext.args = '-p vcf'
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.tbi",
                enabled: false
            ]
        ]
    }
    withName: FILTER1 {
        ext.args = "--output-type z"
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/filter" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.vcf.gz"
            ]
        ]
    }
    withName: RADSEQ_FILTERS_1 {
        ext.args_ab        = params.allele_balance
        ext.args_mq        = params.mapping_quality_ratio
        ext.args_pr        = params.number_of_observations
        ext.args_st        = params.strand_prop_alleles
        ext.args_fmiss     = params.fraction_genotypes_missing
        ext.args_mac       = params.minor_allele_count
        ext.args_mindp     = params.minimum_genotype_depth
        ext.args_maxdp     = params.maximum_genotype_depth
        ext.args_indvfmiss = params.minimum_indv_fraction_missing
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/filter" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        ]
    }
    withName: RADSEQ_FILTERS_2 {
        ext.args_ab        = params.allele_balance
        ext.args_mq        = params.mapping_quality_ratio
        ext.args_pr        = params.number_of_observations
        ext.args_st        = params.strand_prop_alleles
        ext.args_fmiss     = params.fraction_genotypes_missing
        ext.args_mac       = params.minor_allele_count
        ext.args_mindp     = params.minimum_genotype_depth
        ext.args_maxdp     = params.maximum_genotype_depth
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/variant_calling/filter" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.bcf.gz"
            ]
        ]
    }
    withName: MULTIQC {
        ext.args = ''
        publishDir = [
            [
                path: { "${params.outdir}/${params.method}/multiqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }   
}


