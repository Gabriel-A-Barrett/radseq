/*
Gets lengths from reverse read if paired end or forward read
Calculates inset length for fine tuning bwa mem
    Only utilized if PE and denovo
Calculates for freebayes ... intervals 
*/
include { UNZIP_FASTQ_LENGTHS } from '../../modules/local/read_length/unzip_fastq_length.nf'
include { READ_LENGTH_STATS   } from '../../modules/local/read_length/read_length_stats.nf'

workflow CALC_READ_LENGTHS {

    take:
    reads

    main:
    
    ch_versions = Channel.empty()

    //ch_lengths = UNZIP_FASTQ_LENGTHS (reads).lengths
    //ch_versions = ch_versions.mix(UNZIP_FASTQ_LENGTHS.out.versions)

    reads
        .map {
            meta, reads -> 
            if (meta.single_end) {
                return [meta.id,reads[0]]
            } else {
                return [meta.id,reads[1]]
            }
        }
        .splitFastq(record:true,limit:1)
        .map { meta, splitfastq -> 
            return [splitfastq.readString]
        }
        .set {sequence}

    //READ_LENGTH_STATS (sequence.collect())
    //ch_versions = ch_versions.mix(READ_LENGTH_STATS.out.versions)

    emit:
    split_highcov_intervals = READ_LENGTH_STATS.out.split_highcov_intervals
    bwa_mem_denovo_param = READ_LENGTH_STATS.out.bwa_mem_denovo_param

    versions = ch_versions
}

