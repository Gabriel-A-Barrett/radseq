include { BWA_INDEX                            } from '../../modules/nf-core/bwa/index/main.nf'
include { BWA_MEM                              } from '../../modules/nf-core/bwa/mem/main.nf'
include { BWAMEM2_INDEX                        } from '../../modules/nf-core/bwamem2/index/main.nf'
include { BWAMEM2_MEM                          } from '../../modules/nf-core/bwamem2/mem/main.nf'

workflow FASTQ_BWA_INDEX_MEM {
     
    take:
    reads
    fasta
    sequence_type
    read_lengths

     main:

     ch_versions = Channel.empty()
     
     switch ( params.aligner ) {

        case 'bwa-mem': 

            bwaindex = BWA_INDEX (fasta).index
            ch_versions = ch_versions.mix(BWA_INDEX.out.versions)

            // expand channel for multiple denovo references
            ch_fastq_bwaindex = reads.combine(bwaindex)
                .map { WorkflowRadseq.addRefIdToChannels(params, it) }

            // add specific arguments 
            bam = BWA_MEM (ch_fastq_bwaindex, true, sequence_type, read_lengths.collect()).bam
            ch_versions = ch_versions.mix(BWA_MEM.out.versions)
                break

        case 'bwa-mem2':

            bwaindex = BWAMEM2_INDEX (fasta).index 
            ch_versions = ch_versions.mix(BWAMEM2_INDEX.out.versions)

            // expand channel for multiple denovo references and merge correct indices
            ch_fastq_bwaindex = reads.combine(bwaindex)
                .map { WorkflowRadseq.addRefIdToChannels(params, it) }

            // add specific arguments 
            bam = BWAMEM2_MEM (ch_fastq_bwaindex, true, sequence_type, read_lengths.collect()).bam
            ch_versions = ch_versions.mix(BWAMEM2_MEM.out.versions)
                break
            
        default:
            
            exit 1, "unsupported aligner: ${aligner} \n supported options:" + params.aligner_options
        
    }

    emit:
    bam

    versions = ch_versions

}
