include { SAMTOOLS_INDEX as SAMTOOLS_INDEX_BAM } from '../../modules/nf-core/samtools/index/main.nf'
include { GATK4_CREATESEQUENCEDICTIONARY       } from '../../modules/nf-core/gatk4/createsequencedictionary/main'
include { SAMTOOLS_STATS                       } from '../../modules/nf-core/samtools/stats/main'

include { FASTQ_BWA_INDEX_MEM                  } from '../local/fastq_bwa_index_mem'
include { FASTQ_CREATE_UMI_CONSENSUS_FGBIO     } from '../nf-core/fastq_create_umi_consensus_fgbio/main.nf'
include { BAM_UMITOOLS_DEDUP                   } from '../local/bam_umitools_dedup'
include { BAM_STATS_SAMTOOLS                   } from '../nf-core/bam_stats_samtools/main.nf'
include { BAM_MERGE_INDEX_SAMTOOLS             } from '../local/bam_merge_index_samtools'


workflow FASTQ_INDEX_ALIGN_BWA_MINIMAP {

    take:
    reads
    fasta
    fai
    sequence_type
    read_lengths

    main:
    ch_versions = Channel.empty()

    if (params.dedup_tool.contains('fgbio')) {

        // split up based on umi's
        reads2umi = reads
            .branch { meta, reads ->
                umi: meta.umi_barcodes == true
                no_umi: meta.umi_barcodes == false
            }

        dict = GATK4_CREATESEQUENCEDICTIONARY ( fasta ).dict

        FASTQ_CREATE_UMI_CONSENSUS_FGBIO ( reads2umi.umi, fasta, [], dict, params.umi_strategy, params.aligner, params.duplex, read_lengths )
        dedup_bam = FASTQ_CREATE_UMI_CONSENSUS_FGBIO.out.mappedconsensusbam

        // grab bwa indices from subworkflow
        bwaindex = FASTQ_CREATE_UMI_CONSENSUS_FGBIO.out.bwaindex

        bam = FASTQ_BWA_INDEX_MEM ( reads2umi.no_umi, fasta, sequence_type, read_lengths ).bam

        // INDEX
        bai = SAMTOOLS_INDEX_BAM (dedup_bam.mix(bam)).bai
        ch_versions = ch_versions.mix(SAMTOOLS_INDEX_BAM.out.versions)

        bam_bai = bam
            .mix(dedup_bam)
            .join(bai)

    } else {

        //alignments happen before umi
        bam = FASTQ_BWA_INDEX_MEM ( reads, fasta, sequence_type, read_lengths ).bam

        bam2umi = bam
            .branch { meta, reads ->
                umi: meta.umi_barcodes == true
                no_umi: meta.umi_barcodes == false
            }

        dedup_bam = BAM_UMITOOLS_DEDUP ( bam2umi.umi ).consensusbam

        // INDEX
        bai = SAMTOOLS_INDEX_BAM (dedup_bam.mix(bam2umi.no_umi)).bai
        ch_versions = ch_versions.mix(SAMTOOLS_INDEX_BAM.out.versions)

        // Append no umi's
        bam_bai = bam2umi.no_umi
            .mix(dedup_bam)
            .join(bai)
    }
    
    bam_bai_fasta = bam_bai
        .map{meta,bam,bai ->
            [[id:meta.id.split(/[^\p{L}]/)[0],single_end:meta.single_end,ref_id:meta.ref_id], bam, bai]}
        .combine(fasta, by: [0])
        .map{meta,bam,bai,fasta ->
            [[id:bam.getSimpleName(),single_end:meta.single_end,ref_id:meta.ref_id], bam, bai, fasta]}

    // get statistics
    BAM_STATS_SAMTOOLS (bam_bai_fasta)
    ch_versions = ch_versions.mix(BAM_STATS_SAMTOOLS.out.versions)

    // apply groovy function to add mapping percent to channel
    if (params.check_alignment_mapping_rates) {
        BAM_STATS_SAMTOOLS.out.flagstat.map { WorkflowRadseq.getBamPercentMapped(params,it) }.set{ ch_percent_mapped }
    }

    // remove files that didn't make the threshold in params
    bam_bai_fasta.join(ch_percent_mapped, by: [0]).map { meta, bam, bai, fasta, mapped, pass -> if (pass) [meta,bam,bai] }.set { bam_bai_filtered }

    mbam_bai = BAM_MERGE_INDEX_SAMTOOLS (bam_bai_filtered.map{meta,bam,bai -> [meta, bam]}, fasta, fai).bam_bai
    ch_versions = ch_versions.mix(BAM_MERGE_INDEX_SAMTOOLS.out.versions)
    
    //
    // Groovy function appends mismatch_rate and primary_paired to meta for filtering by .min{}
    if (params.method == 'denovo' && params.only_use_best_reference) {
        mbam_bai_fasta = mbam_bai.combine(fasta, by: [0])

        SAMTOOLS_STATS ( mbam_bai_fasta )

        mbam_bai = mbam_bai.join(SAMTOOLS_STATS.out.stats, by:0)
            .map {
                WorkflowRadseq.selectBestPsuedoReference(it[0],it[1],it[2],it[3])
            }
            .min{it[0].mismatch_error}
            .map { meta, mbam, bai -> 
                def metaf = [:]
                metaf.id = meta.id
                metaf.single_end = meta.single_end
                metaf.ref_id = meta.ref_id

                return [metaf, mbam, bai]
            }
    }

        //.map {
        //    WorkflowRadseq.selectBestPsuedoReference(it)
        //}

    emit:
    bam      = bam_bai_filtered.map{meta,bam,bai -> [meta, bam]}
    bam_bai
    mbam_bai
    stats    = BAM_STATS_SAMTOOLS.out.stats
    flagstat = BAM_STATS_SAMTOOLS.out.flagstat
    idxstats = BAM_STATS_SAMTOOLS.out.idxstats
    
    versions = ch_versions
}